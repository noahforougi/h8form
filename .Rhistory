# Scrape the most current release of H.8 form
rm(list = ls())
library(tidyverse)
library(rvest)
h8 <- "https://www.federalreserve.gov/releases/h8/current/"
page <- read_html(h8)
pages <- list()
pages[[1]] <- page %>%
html_nodes(xpath = "/html/body/div[3]/div[4]/table") %>%
html_table(fill = T)
for (i in 2:21) {
pages[[i]] <- page %>%
html_nodes(xpath = paste0("/html/body/div[3]/div[", i + 4, "]/table")) %>%
html_table(fill = T)
pages[[i]] <- as.data.frame(pages[[i]])
}
names <- names(pages[[2]])
str_remove(names[3:10], "..\\.")
# Each page is either seasonally adjusted or not-seasonally adjusted, and represents a subset of all commercial banks. We need to clear that up here.
SA_pages <- pages[c(2, 3, 6, 7, 10, 11, 14, 15, 18, 19)]
NSA_pages <- pages[c(4, 5, 8, 9, 12, 13, 16, 17, 20, 21)]
names(SA_pages) <- c(
"all", "all",
"dom", "dom",
"largedom", "largedom",
"smalldom", "smalldom",
"foreign", "foreign"
)
dat <- bind_rows(SA_pages, .id = "id")
# Clean data frame.
dat <- dat %>%
filter(Account != "Account")
dat$Account[dat$Account %in% paste(seq(1:50))] <- NA
dat <- fill(data = dat, Account)
dat$Account <- str_replace(dat$Account, pattern = " \\(continued\\)", "")
dat <- dat[!(dat$Account.1 %in% c("Assets", "Assets (continued)", "Liabilities", "Memoranda")), ]
dat[] <- sapply(dat, gsub, pattern = "\\,", replacement = "")
dat[, 4:15] <- sapply(dat[4:15], as.numeric)
names(dat) <- gsub("X|\\.", "", names(dat))
names(dat)[12:15] <- paste(seq(from = as.Date(pages[[2]]$Week.ending.3[1], "%b %d"), by = "week", length.out = 4))
View(dat)
View(dat)
library(shiny)
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('h8form')
dat
library(here)
library(tidyverse)
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
library(knitr)
sumstat_w <- read_csv("summarystats_weight.csv", skip = 2, col_names = c("Variable", "Mean", "SD", "Min", "Max", "N"))
sumstat <- read_csv("summarystats.csv", skip = 2, col_names = c("Variable", "Mean", "SD", "Min", "Max", "N"))
rm(list = ls())
sumstat_w <- read_csv("summarystats_weight.csv", skip = 2, col_names = c("Variable", "Mean", "SD", "Min", "Max", "N"))
sumstat <- read_csv("summarystats.csv", skip = 2, col_names = c("Variable", "Mean", "SD", "Min", "Max", "N"))
sumstat_w %>%
mutate_all(funs(gsub('=|"', "", .))) %>%
knitr::kable(caption = "Summary Stats of Climate Variables Weighted by Agricultural Land") %>%
kable_styling(full_width = T)
sumstat %>%
mutate_all(funs(gsub('=|"', "", .))) %>%
knitr::kable(caption = "Summary Stats of Climate Variables") %>%
kable_styling(full_width = T)
