# names(dat)[4:11] <- zoo::as.yearmon(names(dat)[4:11], "%Y%b")
names(dat)[12:15] <- paste(seq(from = as.Date(pages[[2]]$Week.ending.3[1], "%b %d"), by = "week", length.out = 4))
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date))
View(dat)
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename(Account = "Asset or Liabilitiy",
Account1 = "Type",
id = "Bank Type")
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename(Account = `Asset or Liabilitiy`,
Account1 = "Type",
id = "Bank Type")
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename( `Asset or Liabilitiy` = Account,
Account1 = "Type",
id = "Bank Type")
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename( `Asset or Liabilitiy` = Account,
Type = Account1,
`Bank Type"` = id)
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename( Asset or Liabilitiy = Account,
Type = Account1,
`Bank Type"` = id)
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename("Asset or Liability" = Account,
"Type" = Account1,
"Bank Type" = id)
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename("Asset or Liability" = Account,
"Type" = Account1,
"Bank Type" = id) %>%
filter(Type = "Bank credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
dat %>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename("Asset or Liability" = Account,
"Type" = Account1,
"Bank Type" = id) %>%
filter(Type == "Bank credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
# Pivot to long format
dat %<>%
pivot_longer(cols = 4:15, names_to = "date") %>%
mutate(date = ymd(date)) %>%
rename("Asset or Liability" = Account,
"Type" = Account1,
"Bank Type" = id)
library(plotly)
dat %>%
filter(Type = "Bank Credit") %>%
ggplot(aes(x = date, y = value, color = "Bank Type")) +
geom_line()
dat %>%
filter(Type == "Bank Credit") %>%
ggplot(aes(x = date, y = value, color = "Bank Type")) +
geom_line()
dat %>%
filter(Type == "Bank Credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
dat %>%
filter(Type == "Bank Credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
dat %>%
filter(Type == "Bank credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
install.packages(plotly)
install.packages("plotly")
library(plotly)
dat %>%
filter(Type == "Bank credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line() +
ggplotly()
dat %>%
filter(Type == "Bank credit") %>%
ggplotly(aes(x = date, y = value, color = `Bank Type`)) +
geom_line() +
dat %>%
filter(Type == "Bank credit") %>%
ggplotly(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
dat %>%
filter(Type == "Bank credit") %>%
ggplotly(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
dat %>%
filter(Type == "Bank credit") %>%
ggplotly(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
plot <- dat %>%
filter(Type == "Bank credit") %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
ggplotly(plot)
list(as.factor(dat$`Asset or Liability`))
list(levels(as.factor(dat$`Type`)))
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', list(levels(as.factor(dat$`Type`))))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
plot1 <- dat %>% filter(Type == input$ycol) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
output$plot1 <- renderPlotly(
plot1 <- plot_ly(plot1)
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', list(levels(as.factor(dat$`Type`))))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
plot1 <- dat %>% filter(Type == input$ycol) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()
output$plot1 <- renderPlotly(
plot1 <- plot_ly(plot1)
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlotly(
plot1 <- plot_ly(
dat %>%
filter(Type == input$ycol) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlotly(
plot1 <- plot_ly(
dat %>%
filter(Type == input$ycol) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
mtcars[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- plot_ly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
mtcars[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- plot_ly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
mtcars[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
mtcars[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
dat[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('ycol','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({
dat[,input$ycol]
})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('type','Asset or Liability Type', levels(as.factor(dat$`Type`)))),
selected = list(levels(as.factor(dat$`Type`)))[5]
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == y()) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot1 <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('type','Asset or Liability Type', levels(as.factor(dat$`Type`))),
selected = list(levels(as.factor(dat$`Type`)))[5]),
plotOutput("plot",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('type','Asset or Liability Type', levels(as.factor(dat$`Type`))),
selected = list(levels(as.factor(dat$`Type`)))[5]),
mainPanel(
plotlyOutput('plot')
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line())
)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("ggpubr")
install.packages("ggthemes")
library(ggthemes)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()  +
xlab("Date") +
ylab("Dollar Value") +
title(paste("Comparison of", y(), "in US Commercial Banks")) +
theme_economist_white()
)
)
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("H.8 Form Data"),
sidebarPanel(
selectInput('type','Asset or Liability Type', levels(as.factor(dat$`Type`))),
selected = list(levels(as.factor(dat$`Type`)))[5]),
mainPanel(
plotlyOutput('plot')
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()  +
xlab("Date") +
ylab("Dollar Value") +
title(paste("Comparison of", y(), "in US Commercial Banks")) +
theme_economist_white()
)
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()  +
xlab("Date") +
ylab("Dollar Value") +
theme_economist_white()
)
)
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
y <- reactive({input$type})
output$plot <- renderPlotly(
plot1 <- ggplotly(
dat %>%
filter(Type == paste(y())) %>%
ggplot(aes(x = date, y = value, color = `Bank Type`)) +
geom_line()  +
xlab("Date") +
ylab("Dollar Value") +
theme_minimal()
)
)
}
# Run the application
shinyApp(ui = ui, server = server)
